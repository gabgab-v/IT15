@model IT15.ViewModels.SalesHistoryViewModel

@{
    ViewData["Title"] = "Sales History";
    Layout = "~/Views/UserDashboard/_Layout.cshtml";
    var culture = new System.Globalization.CultureInfo("en-PH");
}

<div class="flex justify-between items-center border-b border-gray-200 pb-4 mb-6">
    <h2 class="text-2xl font-bold text-gray-900">Sales History & Reports</h2>
    <a asp-action="Sales"
       class="bg-blue-600 text-white font-medium py-2 px-4 rounded-lg hover:bg-blue-700">
        &larr; Back to Record Sales
    </a>
</div>

<!-- Filter Form -->
<div class="bg-white p-4 rounded-lg shadow-sm border border-gray-200 mb-6">
    <form asp-action="SalesHistory" method="get">
        <div class="flex flex-col md:flex-row gap-4 items-end">
            <div class="flex-1">
                <label class="text-sm font-medium text-gray-700">Custom Date Range</label>
                <div class="flex items-center gap-2 mt-1">
                    <input type="date" name="startDate" value="@Model.StartDate?.ToString("yyyy-MM-dd")" class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm" />
                    <span>to</span>
                    <input type="date" name="endDate" value="@Model.EndDate?.ToString("yyyy-MM-dd")" class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm" />
                </div>
            </div>
            <div class="flex-1">
                <label for="employeeId" class="text-sm font-medium text-gray-700">Employee</label>
                <select name="employeeId" asp-for="SelectedEmployeeId" asp-items="@Model.Employees" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm">
                    <option value="">All Employees</option>
                </select>
            </div>
            <div class="flex items-center space-x-2 w-full md:w-auto">
                <button type="submit" class="flex-1 bg-blue-600 text-white font-medium py-2 px-4 rounded-lg hover:bg-blue-700">Filter</button>
                <a asp-action="SalesHistory" class="flex-1 text-center bg-gray-200 text-gray-800 font-medium py-2 px-4 rounded-lg hover:bg-gray-300">Clear</a>
            </div>
        </div>
        <div class="mt-4 flex items-center gap-2">
            <span class="text-sm font-medium text-gray-700">Quick Filters:</span>
            <a asp-action="SalesHistory" asp-route-filterType="daily" asp-route-employeeId="@Model.SelectedEmployeeId" class="px-3 py-1 text-sm rounded-full @(Model.FilterType == "daily" ? "bg-blue-600 text-white" : "bg-gray-200 text-gray-800 hover:bg-gray-300")">Today</a>
            <a asp-action="SalesHistory" asp-route-filterType="monthly" asp-route-employeeId="@Model.SelectedEmployeeId" class="px-3 py-1 text-sm rounded-full @(Model.FilterType == "monthly" ? "bg-blue-600 text-white" : "bg-gray-200 text-gray-800 hover:bg-gray-300")">This Month</a>
        </div>
    </form>
</div>

<div class="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
    <!-- Total Revenue Card -->
    <div class="lg:col-span-1 bg-white p-6 rounded-lg shadow-sm border border-gray-200">
        <h3 class="text-sm font-medium text-gray-500">Total Revenue for Period</h3>
        <p class="text-3xl font-bold text-green-600 mt-2">@Model.TotalRevenueForPeriod.ToString("C", culture)</p>
    </div>
    <!-- Sales by Employee Chart -->
    <div class="lg:col-span-2 bg-white p-6 rounded-lg shadow-sm border border-gray-200">
        <h3 class="text-lg font-semibold text-gray-800 mb-4">Sales by Employee</h3>
        <div class="h-64">
            <canvas id="salesByEmployeeChart"></canvas>
        </div>
    </div>
</div>

<!-- Revenue Over Time Chart -->
<div class="bg-white p-6 rounded-lg shadow-sm border border-gray-200 mb-8">
    <h3 class="text-lg font-semibold text-gray-800 mb-4">Revenue Over Time</h3>
    <div class="h-80">
        <canvas id="salesOverTimeChart"></canvas>
    </div>
</div>

<!-- Sales History Table -->
<div class="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
    <!-- THE CHANGE: Added Print and PDF buttons -->
    <div class="flex justify-between items-center mb-4">
        <h3 class="text-lg font-semibold text-gray-800">Sales Report</h3>
        <div class="flex items-center space-x-2">
            <button id="print-report-button" class="bg-blue-600 text-white font-medium py-2 px-4 rounded-lg hover:bg-blue-700 flex items-center">
                <i data-lucide="printer" class="w-4 h-4 mr-2"></i> Print Report
            </button>
            <button id="export-pdf-button" class="bg-gray-600 text-white font-medium py-2 px-4 rounded-lg hover:bg-gray-700 flex items-center">
                <i data-lucide="file-down" class="w-4 h-4 mr-2"></i> Export PDF
            </button>
        </div>
    </div>

    <!-- This is the container for the on-screen table -->
    <div id="sales-report-content" class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
                <tr>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Date</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Description</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Sold By</th>
                    <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase">Revenue Added</th>
                </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
                @if (Model.SalesRecords.Any())
                {
                    @foreach (var sale in Model.SalesRecords)
                    {
                        <tr>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@sale.TransactionDate.ToString("MMM dd, yyyy h:mm tt")</td>
                            <td class="px-6 py-4 text-sm text-gray-900">@sale.Description</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@sale.User?.UserName</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-right font-medium text-green-600">@sale.Amount.ToString("C", culture)</td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="4" class="px-6 py-4 text-center text-gray-500">No sales records found for the selected filter.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@section Scripts {
    <!--FIX: Added Chart.js library -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <!-- Dependencies for PDF Export -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>

    <style>
        @@media print {
            body * {
                visibility: hidden;
            }

            .print-area, .print-area * {
                visibility: visible;
            }

            .print-area {
                position: absolute;
                left: 0;
                top: 0;
                width: 100%;
            }
        }
    </style>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Print Logic
            document.getElementById('print-report-button').addEventListener('click', function () {
                const reportContent = document.getElementById('sales-report-content');
                if (reportContent) {
                    reportContent.classList.add('print-area');
                    window.print();
                    reportContent.classList.remove('print-area');
                }
            });

            // PDF Export Logic
            document.getElementById('export-pdf-button').addEventListener('click', function () {
                const contentToExport = document.getElementById('sales-report-content');
                const reportTitle = "Sales Report";
                const filterStartDate = "@Model.StartDate?.ToString("MMM dd, yyyy")" || "N/A";
                const filterEndDate = "@Model.EndDate?.ToString("MMM dd, yyyy")" || "N/A";

                if (contentToExport) {
                    // Temporarily create a clean version for export
                    const exportContainer = document.createElement('div');
                    exportContainer.className = 'p-8 max-w-4xl';
                    exportContainer.innerHTML = `
                                        <div class="text-center border-b pb-4 mb-6">
                                            <h1 class="text-2xl font-bold text-gray-800">OpenBook HRIS</h1>
                                            <p class="text-gray-500">${reportTitle}</p>
                                            <p class="text-sm text-gray-500 mt-1">Date Range: ${filterStartDate} - ${filterEndDate}</p>
                                        </div>
                                        ${contentToExport.innerHTML}
                                    `;

                    // Add it to the body off-screen to be rendered
                    exportContainer.style.position = 'absolute';
                    exportContainer.style.left = '-9999px';
                    document.body.appendChild(exportContainer);

                    html2canvas(exportContainer, { scale: 2 }).then(canvas => {
                        const imgData = canvas.toDataURL('image/png');
                        const { jsPDF } = window.jspdf;
                        const pdf = new jsPDF({ orientation: 'p', unit: 'mm', format: 'a4' });

                        const margin = 10;
                        const pdfWidth = pdf.internal.pageSize.getWidth() - (margin * 2);
                        const imgProps = pdf.getImageProperties(imgData);
                        const pdfHeight = (imgProps.height * pdfWidth) / imgProps.width;

                        pdf.addImage(imgData, 'PNG', margin, margin, pdfWidth, pdfHeight);
                        pdf.save('Sales-Report.pdf');

                        // Clean up the temporary element
                        document.body.removeChild(exportContainer);
                    });
                }
            });

            // --- Sales Over Time Line Chart ---
            const salesOverTimeCtx = document.getElementById('salesOverTimeChart');
            if (salesOverTimeCtx) {
                const salesOverTimeLabels = @Html.Raw(Json.Serialize(Model.SalesOverTimeLabels));
                const salesOverTimeData = @Html.Raw(Json.Serialize(Model.SalesOverTimeData));

                // Add a check for data existence to avoid errors
                if (salesOverTimeLabels && salesOverTimeData) {
                    new Chart(salesOverTimeCtx, {
                        type: 'line',
                        data: {
                            labels: salesOverTimeLabels,
                            datasets: [{
                                label: 'Revenue',
                                data: salesOverTimeData,
                                borderColor: '#3b82f6',
                                tension: 0.1,
                                fill: false
                            }]
                        },
                        options: { responsive: true, maintainAspectRatio: false, plugins: { legend: { display: false } } }
                    });
                }
            }

            // --- Sales by Employee Doughnut Chart ---
            const salesByEmployeeCtx = document.getElementById('salesByEmployeeChart');
            if (salesByEmployeeCtx) {
                const salesByEmployeeLabels = @Html.Raw(Json.Serialize(Model.SalesByEmployeeLabels));
                const salesByEmployeeData = @Html.Raw(Json.Serialize(Model.SalesByEmployeeData));

                // Add a check for data existence to avoid errors
                if (salesByEmployeeLabels && salesByEmployeeData && salesByEmployeeData.some(d => d > 0)) {
                    new Chart(salesByEmployeeCtx, {
                        type: 'doughnut',
                        data: {
                            labels: salesByEmployeeLabels,
                            datasets: [{
                                data: salesByEmployeeData,
                                backgroundColor: ['#3b82f6', '#ef4444', '#f59e0b', '#10b981', '#6366f1'],
                                hoverOffset: 4
                            }]
                        },
                        options: { responsive: true, maintainAspectRatio: false, plugins: { legend: { position: 'right' } } }
                    });
                }
            }
        });
    </script>
}
